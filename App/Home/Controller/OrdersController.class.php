<?php
namespace Home\Controller;
use Common\Controller\CommonController;
class OrdersController extends CommonController{
    public function _initialize(){
        parent::_initialize();
    }


    /**
     * 2017-8-21
     * Author:阿耀王子
     * Description:数字货币行情图
     */
    public function market(){





        $this->display();

    }


    /**
     * 返回指定数量排序的挂单记录
     * @param $currencyid
     * @param \Common\Controller\char $type
     * @param int $num 数量
     * @param \Common\Controller\char $order 排序
     * @return array
     */
    public function getOrdersBuySell($currencyid,$type,$num,$order){

        $where['type']=array('eq',$type);
        $where['status']=array('in',array(0,1));
        $where['currency_id']=$currencyid;


        $list=M('Orders')->field('price')->where($where)->group('price')->limit($num)->select();


//        dump($list);

//        $price_arr=array();
        $buy_arr=array();
        $sell_arr=array();
        foreach ($list as $k=>$v){
            $sell=M('Orders')->field('sum(num) as num')->where($where)->where("type='sell' and price='{$v['price']}'")->limit($num)->select();
            $buy=M('Orders')->field('sum(num) as num')->where($where)->where("type='buy' and price='{$v['price']}'")->limit($num)->select();


//            dump($v['price']);
            $ll[$k][]=$v['price'];


            if(!empty($sell[0]['num'])){
//                $list[$k]['sell']=!empty($sell[0]['num'])?$sell[0]['num']:0;
                $ll[$k][]=!empty($sell[0]['num'])?$sell[0]['num']:0;
            }
            if(!empty($buy[0]['num'])){
//                $list[$k]['buy']=!empty($buy[0]['num'])?$buy[0]['num']:0;
                $ll[$k][]=!empty($buy[0]['num'])?$buy[0]['num']:0;
            }
        }


        $a = '{"asks":[[76.93,1],[76.92,1],[76.8,950.98],[76.7,10],[76.5,20],[76.49,1],[76.48,1],[76.47,27.92],[76.3,150],[76.29,399.1803],[76.28,10],[75.61,0.2202],[75.5,120.4856],[75.48,36],[74.89,20.3689]],"bids":[[74.14,1.1228],[74.13,5.6],[74.12,140],[74.11,100],[74.1,171.385],[74.01,922],[74,194.62],[73.9,483.1],[73.82,22.7596],[73.5,1172.79],[73,45.82],[72.5,351.18],[72.47,1000],[72.43,182],[72.32,32]]}';

//        dump($ll);

//        foreach ($ll as $k=>$v){
////            $price_arr[]=floatval($v['price']);
//            $sell_arr[]=floatval($v['sell']);
//            $buy_arr[]=floatval($v['buy']);
//        }
////        $data['price']=$price_arr;
//        $data['sell']=$sell_arr;
//        $data['buy']=$buy_arr;


//        $this->ajaxReturn($data);



        return $ll;

    }




    /**
     * 返回指定数量排序的挂单记录
     * @param $currencyid
     * @param \Common\Controller\char $type
     * @param int $num 数量
     * @param \Common\Controller\char $order 排序
     * @return array
     */
    protected function getOrdersBuySell2($currencyid,$type,$num,$order){
        $where['type']=array('eq',$type);
        $where['status']=array('in',array(0,1));
        $where['currency_id']=$currencyid;
        $list= M('Orders')->field("sum(num) as num,sum(trade_num) as trade_num,price")->where($where)->group('price')->order("price $order, add_time asc")->limit($num)->select();

        dump($list);

        foreach ($list as $k=>$v){
            $list[$k]['bili']=100-($v['trade_num']/$v['num']*100);
        }
        if ($type=='sell'){
            $list=  array_reverse($list);
        }
        return $list;
    }


    public function depth(){


        $currency['currency_id'] = 30;
        //显示委托记录
        $buy_record=$this->getOrdersBuySell($currency['currency_id'],'buy', 100, 'desc');
        $sell_record=$this->getOrdersBuySell($currency['currency_id'],'sell', 100, 'asc');


//        dump($buy_record);
//        dump($sell_record);



//        $where['status']=array('in',array(0,1));
//        $list=M('Orders')->field('price')->where($where)->group('price')->select();
//        $price_arr=array();
//        $buy_arr=array();
//        $sell_arr=array();
//        foreach ($list as $k=>$v){
//            $sell=M('Orders')->field('sum(num) as num')->where($where)->where("type='sell' and price='{$v['price']}'")->limit(15)->select();
//            $buy=M('Orders')->field('sum(num) as num')->where($where)->where("type='buy' and price='{$v['price']}'")->limit(15)->select();
//            $list[$k]['sell']=!empty($sell[0]['num'])?$sell[0]['num']:0;
//            $list[$k]['buy']=!empty($buy[0]['num'])?$buy[0]['num']:0;
//        }
//        foreach ($list as $k=>$v){
//            $price_arr[]=floatval($v['price']);
//            $sell_arr[]=floatval($v['sell']);
//            $buy_arr[]=floatval($v['buy']);
//        }
//        $data['price']=$price_arr;
//        $data['sell']=$sell_arr;
//        $data['buy']=$buy_arr;

//        $data['price']=$price_arr;
        $data['asks']=$sell_record;
        $data['bids']=$buy_record;
//        $data['date']=time();

//        dump($data);
        $this->ajaxReturn($data);
//        $this->ajaxReturn(json_encode($data));



        $a = '{"asks":[[76.93,1],[76.92,1],[76.8,950.98],[76.7,10],[76.5,20],[76.49,1],[76.48,1],[76.47,27.92],[76.3,150],[76.29,399.1803],[76.28,10],[75.61,0.2202],[75.5,120.4856],[75.48,36],[74.89,20.3689]],"bids":[[74.14,1.1228],[74.13,5.6],[74.12,140],[74.11,100],[74.1,171.385],[74.01,922],[74,194.62],[73.9,483.1],[73.82,22.7596],[73.5,1172.79],[73,45.82],[72.5,351.18],[72.47,1000],[72.43,182],[72.32,32]]}';

//        $data['lastDepth'] = json_decode($a,true);

//        dump(json_decode($a,true));

//        $this->ajaxReturn(json_decode($a,true));
    }

    /**
     * 2017-8-21
     * Author:阿耀王子
     * Description:K线画在这个页面
     */
    public function nkline(){





        if(IS_POST){
//            $this->ajaxReturn($_POST);


            if($_POST['symbol'] == "null"){

                $data['datas']['ecode'] =  101;


                $this->ajaxReturn($data);
            }




//            $_GET['currency'] = "30";
//            $_GET['time'] = "kline_1m";

//            if(empty($_GET['currency'])){
//                return;
//            }



//            $currency_id=I('post.currency');


            //K线
//            $char=!empty($_POST['time'])?I('post.time'):'kline_5m';
            $char=!empty($_POST['type'])?I('post.type'):'5min';
            switch ($char){
                case '1min':$time=1;break;
                case '3min':$time=3;break;
                case '5min':$time=5;break;
                case '15min':$time=15;break;
                case '30min':$time=30;break;
                case '1hour':$time=60;break;
                case '2hour':$time=120;break;
                case '4hour':$time=240;break;
                case '6hour':$time=360;break;
                case 'kline_8h':$time=480;break;
                case '12hour':$time=720;break;
                case '1day':$time=24*60;break;

//                case 'kline_1m':$time=1;break;
//                case 'kline_3m':$time=3;break;
//                case 'kline_5m':$time=5;break;
//                case 'kline_15m':$time=15;break;
//                case 'kline_30m':$time=30;break;
//                case 'kline_1h':$time=60;break;
//                case 'kline_8h':$time=480;break;
//                case 'kline_1d':$time=24*60;break;
                default:$time=5;
            }

            $currency_id = 30;
            $base_time = $time;

            $json = $this->getKlineData($currency_id,$base_time);
            $json = json_encode($json);

//            $data['datas']['data'] =  json_decode($json,true);
            $data['datas']['data'] =  $json;




            if($_POST['symbol'] == null){

                $data['isSuc'] =  false;

                $data['datas']['ecode'] =  101;

                $this->ajaxReturn($data);

            }
            $data['datas']['ecode'] =  $_POST['symbol'];

            $data['isSuc'] =  true;




            $this->ajaxReturn($data);

        }


//        dump($_POST);
//        dump($_GET);
//        dump($_SESSION);

//        $this->display();
    }


    public function vv(){
        $json = "[[1503407460000,71.7,71.7,71.7,71.7,62],[1503407580000,71.6,71.6,71.6,71.6,18.9],[1503407640000,71.61,71.61,71.61,71.61,16],[1503407700000,71.67,72.73,71.67,72.73,35.232],[1503407820000,71.7,71.7,71.7,71.7,8],[1503407940000,71.7,72,71.7,72,72],[1503408000000,71.77,71.77,71.77,71.77,13.6],[1503408060000,71.77,71.99,71.77,71.99,13.5285],[1503408120000,71.95,71.95,71.95,71.95,1.2896],[1503408300000,71.95,71.95,71.95,71.95,6.7104],[1503408360000,71.96,71.96,71.96,71.96,0.719],[1503409140000,72.68,72.69,72.68,72.68,21.2],[1503409200000,72.11,72.11,72.11,72.11,20],[1503409320000,72.12,72.12,72.1,72.1,58],[1503409440000,72.67,72.7,72.67,72.7,77],[1503409560000,72.69,72.69,72.69,72.69,5.9],[1503409680000,72.2,72.2,72.2,72.2,7.45],[1503409800000,72.23,72.23,72.2,72.2,520],[1503409920000,72.2,72.2,72.2,72.2,186],[1503409980000,72.2,72.2,72.2,72.2,27],[1503410100000,72.59,72.59,72.2,72.2,16],[1503410220000,72.2,72.2,72.2,72.2,28.2965],[1503410280000,72.2,72.2,72.2,72.2,389.4861],[1503410400000,72.2,72.2,72.2,72.2,8.13],[1503410460000,72.2,72.2,72,72,112.1574],[1503410520000,71.97,71.97,71.97,71.97,30],[1503410880000,71.11,71.11,71.11,71.11,3.14],[1503411240000,71.13,71.13,71.13,71.13,20],[1503411360000,72.2,72.2,72.2,72.2,13.65],[1503411540000,72.2,72.2,72.2,72.2,36.9],[1503411660000,72.2,72.2,72.2,72.2,0.05],[1503411720000,71.16,71.16,71.16,71.16,138.4681],[1503411900000,71.19,71.19,71.19,71.19,7.49],[1503411960000,71.2,71.2,71.19,71.19,3.65],[1503412020000,71.2,71.2,71.2,71.2,10],[1503412200000,71.2,71.2,71.2,71.2,2],[1503412380000,71.25,71.25,71.24,71.24,118.8403],[1503412740000,71.24,71.24,71.24,71.24,1],[1503413100000,71.24,71.24,71.24,71.24,45],[1503413700000,72.34,72.34,72.34,72.34,1],[1503413820000,72,72.33,72,72.33,22.583],[1503413880000,72,72,72,72,80],[1503414000000,72,72,72,72,5.35],[1503414060000,72,72,72,72,10.545],[1503414120000,72,72,72,72,4.105],[1503414240000,72.34,72.34,72.34,72.34,3],[1503414300000,71.37,72.4,71.36,72.4,147.6816],[1503414600000,72,72,72,72,16.15],[1503414660000,72.45,72.45,72.45,72.45,100],[1503414900000,72,72,72,72,100],[1503415020000,72,72,72,72,10],[1503415080000,72,72.44,72,72,107.7],[1503415140000,72,72,72,72,15.9063],[1503415260000,71.42,72,71.42,72,7.89],[1503415380000,71.42,72,71.42,72,8],[1503415440000,71.42,71.42,71.42,71.42,167],[1503415500000,71.42,71.42,71.06,71.06,351],[1503415560000,72,72,72,72,10],[1503415620000,71.07,71.07,71.07,71.07,354],[1503415800000,71.13,71.13,71.13,71.13,17.05],[1503416040000,71.13,71.13,71.13,71.13,204],[1503416100000,71.99,71.99,71.14,71.14,85.14],[1503416220000,71.17,71.17,71.17,71.17,20],[1503416280000,72,72,72,72,422.8637],[1503416340000,72,72,72,72,1],[1503416460000,72.44,72.44,72.44,72.44,26.15],[1503416520000,72.44,72.44,72.44,72.44,26],[1503416820000,72.45,72.45,72.45,72.45,11],[1503416940000,72.5,72.5,72.45,72.45,35.89],[1503417060000,72.49,72.49,72.49,72.49,21],[1503417180000,72.44,72.44,72.44,72.44,0.04],[1503417300000,72.05,72.05,72.05,72.05,4.17],[1503417360000,72.05,72.05,72.05,72.05,36.57],[1503417480000,72.02,72.02,72.02,72.02,6.1228],[1503417540000,72.05,72.05,72.05,72.05,81.8],[1503417720000,72.02,72.02,72.02,72.02,9.05],[1503417780000,72.02,72.02,72.02,72.02,21.53],[1503417840000,72.05,72.05,72.05,72.05,29],[1503418200000,72.05,72.05,72.05,72.05,11.0497],[1503418260000,72.02,72.02,72.01,72.01,23],[1503418680000,72.49,72.49,72.49,72.49,207.8122],[1503419280000,72.05,72.05,72.05,72.05,5.49],[1503419460000,72.06,72.06,72.06,72.06,2.6],[1503419520000,72.06,72.06,72.06,72.06,10],[1503419700000,72.06,72.06,72.06,72.06,187.4],[1503420060000,72.06,72.06,72.06,72.06,11.05],[1503420120000,72.03,72.03,72.02,72.02,73.97],[1503420180000,72.02,72.03,72.02,72.03,68.35],[1503420300000,72.03,72.03,72.03,72.03,55.9934],[1503421080000,72.49,72.49,72.49,72.49,50],[1503421200000,72.04,72.04,72.04,72.04,19.21],[1503421320000,72.04,72.04,72.04,72.04,31.4845],[1503422160000,72.05,72.05,72.05,72.05,20],[1503422280000,72.49,72.5,72.49,72.5,81.2],[1503422460000,72.07,72.07,72.06,72.06,55.7],[1503422580000,72.06,72.06,72.06,72.06,8.33],[1503422700000,72.5,72.5,72.04,72.04,108.03],[1503422820000,72.5,72.5,72.5,72.5,1],[1503423540000,72.5,72.5,72.5,72.5,6],[1503423780000,72.5,72.5,72.5,72.5,55.77],[1503423840000,72.04,72.04,72.04,72.04,43.38],[1503424140000,72.55,72.55,72.55,72.55,1],[1503424440000,72.55,72.55,72.55,72.55,99],[1503424740000,72.58,72.58,72.58,72.58,3],[1503424800000,72.6,72.6,72.6,72.6,1],[1503425100000,72.6,72.6,72.6,72.6,4.418],[1503425220000,72.6,72.6,72.6,72.6,6.688],[1503425460000,72.58,72.58,72.58,72.58,0.99],[1503425820000,72.6,72.97,72.6,72.97,123.97],[1503426000000,72.97,72.97,72.97,72.97,20.005],[1503426060000,72.98,72.98,72.98,72.98,125.9],[1503426420000,73,73,73,73,148.1699],[1503426540000,73.49,73.49,73.49,73.49,1],[1503426660000,73.49,73.49,73.49,73.49,32.9442],[1503427260000,73.49,73.49,73.49,73.49,5],[1503427320000,73.49,73.49,73.49,73.49,109.2257],[1503427380000,73,73.5,73,73.5,18.7743],[1503427740000,73.5,73.5,73.5,73.5,3.3887],[1503427920000,73.5,73.5,73.5,73.5,0.498],[1503427980000,73.5,73.5,73.5,73.5,3.182],[1503429060000,73.5,73.5,73.5,73.5,6.943],[1503429660000,73.5,73.5,73.5,73.5,27.7883],[1503430020000,73.5,73.5,73.5,73.5,26.64],[1503430440000,72.98,72.98,72.98,72.98,64],[1503430500000,72.98,72.98,72.97,72.97,34],[1503430680000,72.97,72.97,72.97,72.97,4.14],[1503431040000,72.97,72.97,72.97,72.97,6.7104],[1503431280000,73.5,73.5,73.5,73.5,5.993],[1503431460000,73.5,73.5,73.5,73.5,1],[1503431700000,73.5,73.6,73.5,73.6,111.2687],[1503432300000,73.8,73.8,73.8,73.8,20],[1503433260000,73.8,73.83,73.8,73.83,97.34],[1503433620000,73.83,73.92,73.83,73.92,239.8616],[1503433680000,73.93,73.94,73.93,73.94,53.5073],[1503434100000,73.93,73.93,73.93,73.93,20.46],[1503434820000,73.8,73.9,73.8,73.9,50],[1503434940000,73.1,73.1,73.1,73.1,67.14],[1503435000000,73.1,73.1,73.1,73.1,23.86],[1503435240000,73.9,73.96,73.9,73.96,94.922],[1503435300000,73.96,73.97,73.96,73.97,31],[1503435660000,73.97,74.01,73.97,74.01,637.9403],[1503435720000,74.06,74.17,74.06,74.17,181.01],[1503435780000,74.17,74.28,74.17,74.28,62.97],[1503435840000,74.28,74.28,74.28,74.28,39.02],[1503435900000,74.3,74.3,74.3,74.3,25],[1503435960000,74.3,74.3,74.3,74.3,20],[1503436020000,74.4,74.5,74.4,74.5,45.75],[1503436080000,74.5,74.5,74.5,74.5,180.92],[1503436200000,74.5,74.5,74.5,74.5,40],[1503436500000,74.5,74.5,74.5,74.5,49.86],[1503436620000,74.5,74.5,74.5,74.5,3],[1503437400000,74.5,74.5,74.5,74.5,4],[1503437700000,74.5,74.5,74.5,74.5,27.17],[1503437760000,74.5,74.5,74.5,74.5,20],[1503437820000,74.5,74.5,74.5,74.5,29.47],[1503438240000,74.5,74.5,74.5,74.5,6],[1503438360000,74.5,74.5,74.5,74.5,80],[1503438420000,74.5,74.5,74.5,74.5,16],[1503438480000,74.5,74.5,74.5,74.5,90.34],[1503439440000,74.1,74.1,74.1,74.1,1.02],[1503440700000,73.11,73.11,73.11,73.11,9],[1503440820000,73.11,73.11,73.1,73.1,10],[1503440940000,73.5,73.5,73.5,73.5,133.7009],[1503441060000,73.5,73.5,73.5,73.5,80],[1503441240000,73.5,73.5,73.5,73.5,53.19],[1503441360000,73.5,73.5,73.5,73.5,31.02],[1503441540000,73.5,73.5,73.5,73.5,2.0891],[1503441600000,73.5,73.5,73.5,73.5,10],[1503441660000,73.5,73.5,73.1,73.1,67],[1503441720000,73.1,73.1,73,73,30],[1503441840000,73,73,73,73,68.7],[1503442140000,73,73,73,73,1.06],[1503442260000,73.5,73.5,73.5,73.5,50],[1503442440000,73.4,73.4,73.4,73.4,49.7],[1503442800000,73.3,73.3,73.3,73.3,100],[1503442860000,73,73,73,73,100],[1503443160000,73,73,73,73,13.39],[1503443220000,72.97,72.97,72.97,72.97,35.2446],[1503443280000,72.6,72.6,72.6,72.6,134],[1503443400000,72.6,72.6,72.6,72.6,5],[1503443520000,72.6,72.6,72.6,72.6,21],[1503443820000,72.6,72.6,72.6,72.6,105],[1503443880000,72.97,72.97,72.97,72.97,0.64],[1503444000000,72.58,72.58,72.58,72.58,60],[1503444180000,72.58,72.58,72.58,72.58,30],[1503444300000,72.58,72.58,72.58,72.58,15],[1503444360000,72.97,72.97,72.97,72.97,12.1154],[1503444480000,72.97,72.97,72.97,72.97,23.8],[1503444660000,72.97,72.97,72.97,72.97,28.2646],[1503445080000,72.96,72.96,72.96,72.96,4.44],[1503445380000,72.96,73.39,72.96,73.39,63],[1503445440000,73.39,73.39,73.39,73.39,135.746],[1503445680000,73.39,73.39,73.39,73.39,80],[1503446100000,73.39,73.39,73.39,73.39,1],[1503446160000,73.39,73.39,73.39,73.39,29.6364],[1503446220000,73.4,73.4,73,73,9],[1503446460000,73.4,73.4,73.4,73.4,1],[1503446700000,73.4,73.4,73.4,73.4,39],[1503446820000,73.4,73.4,73.4,73.4,119.8],[1503446940000,73.42,73.42,73.42,73.42,50],[1503447000000,73.42,73.42,73.42,73.42,5],[1503447060000,73.45,73.46,73.45,73.46,104.73],[1503447120000,73.5,73.53,73.5,73.53,26.1039],[1503447180000,73.53,73.53,73.53,73.53,7.11],[1503447300000,73.5,73.5,73.5,73.5,24.1039],[1503447420000,73.51,73.51,73.51,73.51,5],[1503447480000,73.53,73.65,73.53,73.65,135.567],[1503447660000,73.65,73.65,73.65,73.65,8.373],[1503448080000,73.65,73.65,73.65,73.65,1.627],[1503448200000,73.77,73.77,73.77,73.77,30.41],[1503448260000,73.77,73.79,73.77,73.79,68.12],[1503448320000,73.65,73.65,73.65,73.65,48.373],[1503448440000,73.79,73.79,73.79,73.79,26.47],[1503448500000,73.81,73.81,73.81,73.81,6.7596],[1503448560000,73.81,73.81,73.81,73.81,65.2404],[1503448620000,73.85,73.85,73.85,73.85,8],[1503448680000,73.85,73.85,73.85,73.85,47],[1503448740000,73.82,73.88,73.82,73.88,36.06],[1503448860000,73.88,73.88,73.88,73.88,52.94],[1503448920000,73.92,73.92,73.92,73.92,20],[1503448980000,73.92,73.92,73.9,73.92,51.9],[1503449040000,73.92,74.01,73.92,74.01,88],[1503449100000,74.01,74.01,74.01,74.01,64],[1503449160000,74.05,74.05,74.05,74.05,16.44],[1503449220000,74.05,74.05,74.05,74.05,36],[1503449280000,74.05,74.85,74.05,74.85,385.3809],[1503449340000,74.85,75,74.85,75,65.96],[1503449400000,75,75,74.51,75,492.95],[1503449460000,75,75.5,74.51,74.51,816.4085],[1503449700000,75.5,75.5,75.5,75.5,1],[1503449760000,74.61,74.61,74.61,74.61,20],[1503449820000,74.61,74.62,74.61,74.62,25],[1503449940000,75.35,75.35,74.63,74.63,67.73],[1503450060000,75,75.3,75,75,130.58],[1503450120000,75.3,75.35,75.3,75.3,244.3337],[1503450180000,75.3,75.58,75.3,75.58,230.9028],[1503450240000,75.58,75.91,75.5,75.91,201.59],[1503450300000,75.91,76,75.6,76,221.25],[1503450360000,76,77,76,76.9,876.7392],[1503450420000,76.9,77,76.8,76.98,1142.14],[1503450480000,76.98,76.98,76.98,76.98,24.86],[1503450540000,76.98,76.98,76.98,76.98,10],[1503450600000,76.9,77,76.6,76.6,133.07],[1503450840000,75.61,75.61,75.61,75.61,30],[1503450900000,75.61,75.61,75.61,75.61,1.99],[1503450960000,75.61,75.61,75.61,75.61,14.47],[1503451020000,76.14,76.15,76.14,76.15,2],[1503451080000,76.15,76.2,76.15,76.2,10.99],[1503451140000,76.2,76.2,76.15,76.15,24],[1503451200000,76.15,76.2,76.15,76.2,2],[1503451260000,76.2,76.2,76.2,76.2,1],[1503451320000,76,76.2,76,76,86.27],[1503451440000,76,76,76,76,29.37],[1503451560000,75.6,75.6,75.6,75.6,84],[1503451620000,75.67,75.99,75.67,75.67,66],[1503451680000,75.67,75.98,75.67,75.69,217.7392],[1503451740000,75.98,75.99,75.7,75.99,141.8],[1503451800000,75.99,76,75.99,76,408.8213],[1503451860000,76.48,76.48,76.48,76.48,1],[1503451920000,76.48,76.5,76.48,76.5,245.89],[1503451980000,76.6,76.6,76.6,76.6,88.904],[1503452040000,76.6,76.6,76.6,76.6,31],[1503452100000,76.6,76.6,76.6,76.6,79.2388],[1503452160000,76.8,76.98,76.8,76.98,250],[1503452280000,76.98,77,76.85,77,368.8216],[1503452340000,76.52,76.52,76.52,76.52,5],[1503452460000,76.98,77,76.98,77,206.401],[1503452520000,76.98,76.99,76.61,76.99,253.559],[1503452580000,76.99,77,76.99,77,7.441],[1503452640000,77,77.1,76.55,77.1,343.8694],[1503452700000,77,77.22,77,77,32],[1503452760000,77,77.2,76.56,77.2,51],[1503453000000,77.08,77.08,76.61,76.61,201],[1503453060000,76.61,76.61,76.6,76.6,40.6],[1503453120000,76.6,76.6,76.6,76.6,87],[1503453180000,76.6,76.6,76.55,76.55,204],[1503453300000,77,77,76.5,76.5,260.5986],[1503453360000,76.5,76.5,76.01,76.01,41.9814],[1503453420000,76.01,76.01,76.01,76.01,35.384],[1503453480000,75.99,75.99,75.99,75.99,0.81],[1503453540000,75.98,75.98,75.72,75.73,13.9201],[1503453600000,75.73,75.73,75.73,75.73,1],[1503453720000,76,76,75.72,75.72,9.79],[1503453780000,75.72,75.72,75.72,75.72,8],[1503453840000,76,76,76,76,40],[1503453900000,75.67,75.67,75.6,75.6,72],[1503453960000,75.67,75.67,75.6,75.61,101.721],[1503454020000,75.62,75.62,75.62,75.62,13.9968],[1503454080000,75.62,75.62,75.62,75.62,0.412],[1503454140000,75.61,75.61,75.61,75.61,11.65],[1503454200000,75.61,75.61,75.61,75.61,52.4663],[1503454260000,75.51,75.51,75.5,75.5,256.48],[1503454320000,75.5,75.5,75.5,75.5,9.46],[1503454380000,75.5,75.5,75.3,75.3,158.695],[1503454440000,75.5,75.5,75.5,75.5,71.8798],[1503454500000,75.5,75.5,75.5,75.5,293.24],[1503454560000,75.5,75.5,75.5,75.5,28],[1503454680000,75.5,75.5,75.5,75.5,278.6302],[1503454740000,75.3,75.3,75.02,75.02,2.73],[1503454800000,75.03,75.5,75.02,75.5,50.725]]";




        dump(json_decode($json,true));


//            $data['datas']['data'] =  json_decode($json,true);
    }
    public function dd(){

        $json = $this->getKlineData();
//            $json = json_encode($json);

        dump($json);


//            $data['datas']['data'] =  json_decode($json,true);
    }


    public function aaa(){


        $a = '{"asks":[[93.50000000, 19.26000000],[93.45000000, 3.00000000],[93.33000000, 50.00000000],[93.21000000, 15.02000000],[93.00000000, 349.98000000],[92.25000000, 23.00000000],[92.20000000, 50.00000000],[92.00000000, 135.89000000],[91.88000000, 1.35000000],[91.69000000, 11.02000000],[91.60000000, 5.00000000],[91.52000000, 38.00000000],[91.00000000, 42.00000000],[90.90000000, 160.00000000],[90.30000000, 172.00000000],[90.08000000, 10.00000000],[90.00000000, 1183.61810000],[89.99000000, 63.38140000],[89.98000000, 10.00000000],[89.80000000, 6.24000000],[89.77000000, 108.36400000],[89.70000000, 100.32000000],[89.68000000, 100.00000000],[89.15000000, 10.00000000],[89.01000000, 99.72000000],[89.00000000, 1139.29730000],[88.88000000, 121.00000000],[88.82000000, 2.99000000],[88.60000000, 130.84000000],[88.58000000, 10.00000000],[88.35000000, 20.00000000],[88.23000000, 10.00000000],[88.14000000, 80.47000000],[88.00000000, 706.17290000],[87.99000000, 25.00000000],[87.90000000, 128.00000000],[87.69000000, 10.00000000],[87.45000000, 36.10000000],[87.33000000, 10.00000000],[87.00000000, 215.65880000],[86.60000000, 100.00000000],[86.48000000, 10.00000000],[86.20000000, 10.00000000],[86.00000000, 651.87000000],[85.88000000, 19.13000000],[85.80000000, 504.00000000],[85.66000000, 100.00000000],[85.60000000, 56.20000000],[85.55000000, 1.00000000],[85.33000000, 10.00000000],[85.00000000, 1651.03270000],[84.90000000, 108.00000000],[84.80000000, 4.00000000],[84.50000000, 751.04000000],[84.40000000, 86.00000000],[84.30000000, 9.65000000],[84.25000000, 20.00000000],[84.20000000, 69.53010000],[84.00000000, 233.02760000],[83.54000000, 59.60000000],[83.52000000, 50.00000000],[83.33000000, 10.00000000],[83.00000000, 532.27000000],[82.99000000, 14.38810000],[82.98000000, 259.68000000],[82.94000000, 99.80100000],[82.80000000, 15.08790000],[82.79000000, 53.23000000],[82.78000000, 13.39640000],[82.50000000, 40.00000000],[82.45000000, 26.87000000],[82.00000000, 225.70000000],[81.88000000, 1.00000000],[81.79000000, 1.00000000],[81.75000000, 4.00000000],[81.70000000, 1.00000000],[81.60000000, 70.00000000],[81.30000000, 23.96710000],[81.00000000, 330.00000000],[80.80000000, 100.00000000],[80.66000000, 10.76090000],[80.52000000, 113.55000000],[80.50000000, 1.00000000],[80.40000000, 100.00000000],[80.00000000, 696.32200000],[79.99000000, 4.14000000],[79.98000000, 20.00000000],[79.88000000, 39.36000000],[79.55000000, 1300.50100000],[79.50000000, 29.50000000],[79.22000000, 20.00000000],[79.20000000, 80.00000000],[79.18000000, 100.00000000],[79.00000000, 152.46480000],[78.99000000, 9.00000000],[78.98000000, 154.02680000],[78.39000000, 36.86000000],[78.20000000, 267.16520000],[78.19000000, 1.30000000],[78.18000000, 4.95670000]],"bids":[[77.83000000, 179.62430000],[77.82000000, 103.18890000],[77.80000000, 178.20000000],[77.72000000, 1.19000000],[77.68000000, 217.90060000],[77.63000000, 50.00000000],[77.59000000, 100.60000000],[77.50000000, 4.00000000],[77.32000000, 118.00000000],[77.10000000, 1.00000000],[77.01000000, 106.00000000],[77.00000000, 63.50000000],[76.68000000, 10.00000000],[76.59000000, 50.00000000],[76.50000000, 107.48000000],[76.00000000, 189.27000000],[75.60000000, 89.85000000],[75.56000000, 20.00000000],[75.50000000, 132.55000000],[75.30000000, 40.00000000],[75.10000000, 100.00000000],[75.09000000, 122.81710000],[75.08000000, 122.97400000],[75.07000000, 122.97400000],[75.06000000, 122.97400000],[75.05000000, 122.97400000],[75.04000000, 181.16400000],[75.03000000, 192.26000000],[75.02000000, 192.26000000],[75.01000000, 212.26000000],[75.00000000, 1744.40880000],[74.80000000, 50.00000000],[74.59000000, 269.16760000],[74.50000000, 6.00000000],[74.12000000, 10.00000000],[74.01000000, 51.03220000],[74.00000000, 254.43000000],[73.88000000, 10.00000000],[73.81000000, 50.00000000],[73.60000000, 70.84000000],[73.55000000, 20.00000000],[73.50000000, 207.93000000],[73.45000000, 30.00000000],[73.38000000, 146.52000000],[73.33000000, 50.00000000],[73.12000000, 16.42500000],[73.00000000, 519.73000000],[72.99000000, 30.00000000],[72.96000000, 50.00000000],[72.88000000, 150.00000000],[72.61000000, 60.00000000],[72.50000000, 13.00000000],[72.36000000, 20.00000000],[72.00000000, 934.69000000],[71.96000000, 50.00000000],[71.90000000, 1195.94660000],[71.88000000, 150.00000000],[71.56000000, 20.00000000],[71.50000000, 440.00000000],[71.30000000, 28.53000000],[71.10000000, 100.00000000],[71.01000000, 2.00000000],[71.00000000, 571.39400000],[70.50000000, 65.00000000],[70.29000000, 20.00000000],[70.23000000, 60.00000000],[70.20000000, 70.38000000],[70.10000000, 45.00000000],[70.01000000, 10.00000000],[70.00000000, 1430.74700000],[69.80000000, 30.00000000],[69.50000000, 0.76130000],[69.00000000, 14.63000000],[68.85000000, 7.53720000],[68.50000000, 216.65000000],[68.10000000, 9.48000000],[68.00000000, 1321.90000000],[67.80000000, 231.00000000],[67.50000000, 65.00000000],[67.01000000, 10.00000000],[67.00000000, 324.59390000],[66.88000000, 3.00000000],[66.66000000, 110.00000000],[66.58000000, 60.00000000],[66.20000000, 152.00000000],[66.18000000, 42.05000000],[66.01000000, 155.00000000],[66.00000000, 781.86000000],[65.80000000, 56.26100000],[65.70000000, 2.76000000],[65.66000000, 157.39000000],[65.62000000, 11.64000000],[65.58000000, 156.00000000],[65.52000000, 156.00000000],[65.50000000, 5.00000000],[65.05000000, 555.00000000],[65.01000000, 10.00000000],[65.00000000, 814.91470000],[64.50000000, 178.12000000],[64.20000000, 356.24000000]],"date":1503293482}';

        dump(json_decode($a,true));

        echo  date("Y-m-d H:i:s");
        echo time();
    }



    //获取k线
    public function getKlineData($currency_id,$base_time){







        $time=time()-$base_time*60*60;   //当前时间减去时间类型*1小时


        for ($i=0;$i<60;$i++){
            $start= $time+$base_time*60*$i;
            $end=$start+$base_time*60;

//                dump($start);
//                dump($end);



            //时间
            $item[$i][]=$start*1000+8*3600;
            $where['currency_id']=$currency_id;
            $where['type']='buy';
            $where['add_time']=array('between',array($start,$end));

            //开盘
            $where_price['currency_id']=$currency_id;
            $where_price['type']='buy';
            $where_price['add_time']=array('elt',$end);

            $order_k=M('Trade')->field('price')->where($where_price)->order('add_time desc')->find();

//            dump($where_price);
//            dump($order_k);

            $item[$i][]=!empty($order_k['price'])?floatval($order_k['price']):0;

            //最高
            $max=M('Trade')->where($where)->max('price');
            $max=!empty($max)?floatval($max):floatval($order_k['price']);
            $max=!empty($max)?$max:0;
            $item[$i][]=$max;
            //最低
            $min=M('Trade')->where($where)->min('price');
            $min=!empty($min)?floatval($min):floatval($order_k['price']);
            $item[$i][]=!empty($min)?$min:0;




            //收盘
            $order_s=M('Trade')->field('price')->where($where)->order('add_time asc')->find();
            $order_s=!empty($order_s['price'])?floatval($order_s['price']):floatval($order_k['price']);
            $item[$i][]=!empty($order_s)?$order_s:0;






            //交易量
            $num=M('Trade')->where($where)->sum('num');

//                dump($where);
//                dump($num);

            $item[$i][]=!empty($num)?floatval($num):0;

        }
        // $item=json_encode($item,true);
//        return $item;

//        $data[$char]=$this->getKline($time,$currency_id);


        return $item;
//        dump($item);
//        $data[$char]=$item;
//        dump($data);

//        $this->ajaxReturn($data);
    }



    //获取k线
    public function getDataKline(){


        $_GET['currency'] = "30";
        $_GET['time'] = "kline_1d";

        if(empty($_GET['currency'])){
            return;
        }


        dump($_GET);

        $currency_id=I('get.currency');


        //K线
        $char=!empty($_GET['time'])?I('get.time'):'kline_5m';
        switch ($char){
            case 'kline_1m':$time=1;break;
            case 'kline_3m':$time=3;break;
            case 'kline_5m':$time=5;break;
            case 'kline_15m':$time=15;break;
            case 'kline_30m':$time=30;break;
            case 'kline_1h':$time=60;break;
            case 'kline_8h':$time=480;break;
            case 'kline_1d':$time=24*60;break;
            default:$time=5;
        }


        dump($time);


        $base_time = $time;
        $time=time()-$base_time*60*60;

            dump($time);

        for ($i=0;$i<60;$i++){
            $start= $time+$base_time*60*$i;
            $end=$start+$base_time*60;

//                dump($start);
//                dump($end);



            //时间
            $item[$i][]=$start*1000+8*3600*1000;
            $where['currency_id']=$currency_id;
            $where['type']='buy';
            $where['add_time']=array('between',array($start,$end));

            //交易量
            $num=M('Trade')->where($where)->sum('num');

//                dump($where);
//                dump($num);

            $item[$i][]=!empty($num)?floatval($num):0;
            //开盘
            $where_price['currency_id']=$currency_id;
            $where_price['type']='buy';
            $where_price['add_time']=array('elt',$end);

            $order_k=M('Trade')->field('price')->where($where_price)->order('add_time desc')->find();
            $item[$i][]=!empty($order_k['price'])?floatval($order_k['price']):0;
            //最高
            $max=M('Trade')->where($where)->max('price');
            $max=!empty($max)?floatval($max):$order_k['price'];
            $max=!empty($max)?$max:0;
            $item[$i][]=$max;
            //最低
            $min=M('Trade')->where($where)->min('price');
            $min=!empty($min)?floatval($min):$order_k['price'];
            $item[$i][]=!empty($min)?$min:0;
            //收盘
            $order_s=M('Trade')->field('price')->where($where)->order('add_time asc')->find();
            $order_s=!empty($order_s['price'])?floatval($order_s['price']):$order_k['price'];
            $item[$i][]=!empty($order_s)?$order_s:0;
        }
        // $item=json_encode($item,true);
//        return $item;

//        $data[$char]=$this->getKline($time,$currency_id);


        dump($item);

        $data[$char]=$item;



        dump($data);

//        $this->ajaxReturn($data);
    }




    //交易页面显示
    public function index(){
        if(empty($_GET['currency'])){
            $this->display('Public:b_stop');
            return;
        }        
        $currency_id=I('get.currency');
        $currency=M('Currency')->where("currency_mark='$currency_id' and is_line=1")->find();
        if(empty($currency)){
            $this->display('Public:b_stop');
            return;
        }
        $currency['currency_digit_num']=$currency['currency_digit_num']?$currency['currency_digit_num']:4;//设置限制位数
        //显示委托记录
        $buy_record=$this->getOrdersByType($currency['currency_id'],'buy', 10, 'desc');
        $sell_record=$this->getOrdersByType($currency['currency_id'],'sell', 10, 'asc');
        $this->assign('buy_record',$buy_record);
        $this->assign('sell_record',$sell_record);
        //格式化手续费
        $currency['currency_sell_fee']=floatval($currency['currency_sell_fee']);
        $currency['currency_buy_fee']=floatval($currency['currency_buy_fee']);
        //币种信息
        $currency_message=$this->getCurrencyMessageById($currency['currency_id']);
        $currency_trade=$this->getCurrencynameById($currency['trade_currency_id']);
        $this->assign('currency_message',$currency_message);
        $this->assign('currency_trade',$currency_trade);
        //个人账户资产
        if (!empty($_SESSION['USER_KEY_ID'])){
            $user_currency_money['currency']['num']=$this->getUserMoney($currency['currency_id'], 'num');
            $user_currency_money['currency']['forzen_num']=$this->getUserMoney($currency['currency_id'], 'forzen_num');
            $user_currency_money['currency_trade']['num']=$this->getUserMoney($currency['trade_currency_id'], 'num');
            $user_currency_money['currency_trade']['forzen_num']=$this->getUserMoney($currency['trade_currency_id'], 'forzen_num');
            if($currency['trade_currency_id']==0){
                $user_currency_money['currency_trade']['num']=$this->member['rmb'];
                $user_currency_money['currency_trade']['forzen_num']=$this->member['forzen_rmb'];
            }
            $this->assign('user_currency_money',$user_currency_money);
            //个人挂单记录
            $this->assign('user_orders',$this->getOrdersByUser(5,$currency['currency_id']));
            //最大可买
            if (!empty($sell_record)){
            		  $buy_num=sprintf('%.4f',$user_currency_money['currency_trade']['num']/$sell_record[0]['price']);
            }else {
                $buy_num=0;
            }
            $this->assign('buy_num',$buy_num);
            //最大可卖
            $sell_num=sprintf('%.4f',$user_currency_money['currency']['num']);
            $this->assign('sell_num',$sell_num);
        }
        $this->assign('session',$_SESSION['USER_KEY_ID']);
        $this->assign('currency',$currency);
        //成交记录
        $trade=$this->getOrdersByStatus(2, 20, $currency['currency_id']);
        $this->assign('trade',$trade);
        $this->display();
    }
    //交易大厅
    public function currency_trade(){
        $count = M('Currency')->where('is_line=1')->count();//根据分类查找数据数量
        $page = new \Think\Page($count,10);//实例化分页类，传入总记录数和每页显示数
        $show = $page->show();//分页显示输出性
        $currency = M('Currency')->where('is_line=1')->order('sort')->limit($page->firstRow.','.$page->listRows)->select();//时间降序排列，越接近当前时间越高
        foreach ($currency as $k=>$v){
            $list=$this->getCurrencyMessageById($v['currency_id']);
            $currency[$k]=array_merge($list,$currency[$k]);
            $list['new_price']?$list['new_price']:0;
            $currency[$k]['currency_all_money'] = floatval($v['currency_all_num'])*$list['new_price'];
        }
        $this->assign('page',$show);
        $this->assign('currency',$currency);
        $this->display();
    }
    
    //获取挂单记录
    public function getOrders(){
        switch (I('post.type')){
          case 'buy':  $this->ajaxReturn($this->getOrdersByType(I('post.currency_id'),'buy', 10, 'desc'));
          break;
          case 'sell':$this->ajaxReturn($this->getOrdersByType(I('post.currency_id'),'sell', 10, 'asc'));
          break;
        }
    }
    //获取k线
    public function getOrdersKline(){
        if(empty($_GET['currency'])){
            return;
        }
        $currency_id=I('get.currency');


        //K线
        $char=!empty($_GET['time'])?I('get.time'):'kline_5m';
        switch ($char){
            case 'kline_1m':$time=1;break;
            case 'kline_3m':$time=3;break;
            case 'kline_5m':$time=5;break;
            case 'kline_15m':$time=15;break;
            case 'kline_30m':$time=30;break;
            case 'kline_1h':$time=60;break;
            case 'kline_8h':$time=480;break;
            case 'kline_1d':$time=24*60;break;
            default:$time=5;
        }
        $data[$char]=$this->getKline($time,$currency_id);

        $this->ajaxReturn($data);
    }
    //获取K线
    private function getKline($base_time,$currency_id){
            $time=time()-$base_time*60*60;

//            dump($time);

            for ($i=0;$i<60;$i++){
                 $start= $time+$base_time*60*$i;
                 $end=$start+$base_time*60;

//                dump($start);
//                dump($end);



                //时间
                $item[$i][]=$start*1000+8*3600*1000;
                $where['currency_id']=$currency_id;
                $where['type']='buy';
                $where['add_time']=array('between',array($start,$end));

                //交易量
              $num=M('Trade')->where($where)->sum('num');

//                dump($where);
//                dump($num);

              $item[$i][]=!empty($num)?floatval($num):0;
                //开盘
                $where_price['currency_id']=$currency_id;
                $where_price['type']='buy';
                $where_price['add_time']=array('elt',$end);

                $order_k=M('Trade')->field('price')->where($where_price)->order('add_time desc')->find();
                $item[$i][]=!empty($order_k['price'])?floatval($order_k['price']):0;
                //最高
               $max=M('Trade')->where($where)->max('price');
               $max=!empty($max)?floatval($max):$order_k['price'];
               $max=!empty($max)?$max:0;
               $item[$i][]=$max;
                //最低
                $min=M('Trade')->where($where)->min('price');
                $min=!empty($min)?floatval($min):$order_k['price'];
                $item[$i][]=!empty($min)?$min:0;
                //收盘
                $order_s=M('Trade')->field('price')->where($where)->order('add_time asc')->find();
                $order_s=!empty($order_s['price'])?floatval($order_s['price']):$order_k['price'];
                $item[$i][]=!empty($order_s)?$order_s:0;
            }
       // $item=json_encode($item,true);
        return $item;
    }
}